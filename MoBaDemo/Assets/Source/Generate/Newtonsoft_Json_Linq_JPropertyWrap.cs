//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Newtonsoft_Json_Linq_JPropertyWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Newtonsoft.Json.Linq.JProperty), typeof(Newtonsoft.Json.Linq.JContainer));
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("Load", Load);
		L.RegFunction("New", _CreateNewtonsoft_Json_Linq_JProperty);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("Name", get_Name, null);
		L.RegVar("Value", get_Value, set_Value);
		L.RegVar("Type", get_Type, null);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNewtonsoft_Json_Linq_JProperty(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.Linq.JProperty arg0 = (Newtonsoft.Json.Linq.JProperty)ToLua.CheckObject<Newtonsoft.Json.Linq.JProperty>(L, 1);
				Newtonsoft.Json.Linq.JProperty obj = new Newtonsoft.Json.Linq.JProperty(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				string arg0 = ToLua.CheckString(L, 1);
				object arg1 = ToLua.ToVarObject(L, 2);
				Newtonsoft.Json.Linq.JProperty obj = new Newtonsoft.Json.Linq.JProperty(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (TypeChecker.CheckTypes<string>(L, 1) && TypeChecker.CheckParamsType<object>(L, 2, count - 1))
			{
				string arg0 = ToLua.CheckString(L, 1);
				object[] arg1 = ToLua.ToParamsObject(L, 2, count - 1);
				Newtonsoft.Json.Linq.JProperty obj = new Newtonsoft.Json.Linq.JProperty(arg0, arg1);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Newtonsoft.Json.Linq.JProperty.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Newtonsoft.Json.Linq.JProperty obj = (Newtonsoft.Json.Linq.JProperty)ToLua.CheckObject<Newtonsoft.Json.Linq.JProperty>(L, 1);
			Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.CheckObject<Newtonsoft.Json.JsonWriter>(L, 2);
			Newtonsoft.Json.JsonConverter[] arg1 = ToLua.CheckObjectArray<Newtonsoft.Json.JsonConverter>(L, 3);
			obj.WriteTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Load(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.JsonReader arg0 = (Newtonsoft.Json.JsonReader)ToLua.CheckObject<Newtonsoft.Json.JsonReader>(L, 1);
			Newtonsoft.Json.Linq.JProperty o = Newtonsoft.Json.Linq.JProperty.Load(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Name(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JProperty obj = (Newtonsoft.Json.Linq.JProperty)o;
			string ret = obj.Name;
			LuaDLL.lua_pushstring(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Name on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JProperty obj = (Newtonsoft.Json.Linq.JProperty)o;
			Newtonsoft.Json.Linq.JToken ret = obj.Value;
			ToLua.PushObject(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Value on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JProperty obj = (Newtonsoft.Json.Linq.JProperty)o;
			Newtonsoft.Json.Linq.JTokenType ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JProperty obj = (Newtonsoft.Json.Linq.JProperty)o;
			Newtonsoft.Json.Linq.JToken arg0 = (Newtonsoft.Json.Linq.JToken)ToLua.CheckObject<Newtonsoft.Json.Linq.JToken>(L, 2);
			obj.Value = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Value on a nil value");
		}
	}
}

