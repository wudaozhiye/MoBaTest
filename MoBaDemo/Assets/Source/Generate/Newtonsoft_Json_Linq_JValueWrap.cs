//this source code was auto-generated by tolua#, do not modify it
using System;
using LuaInterface;

public class Newtonsoft_Json_Linq_JValueWrap
{
	public static void Register(LuaState L)
	{
		L.BeginClass(typeof(Newtonsoft.Json.Linq.JValue), typeof(Newtonsoft.Json.Linq.JToken));
		L.RegFunction("CreateComment", CreateComment);
		L.RegFunction("CreateString", CreateString);
		L.RegFunction("WriteTo", WriteTo);
		L.RegFunction("Equals", Equals);
		L.RegFunction("GetHashCode", GetHashCode);
		L.RegFunction("ToString", ToString);
		L.RegFunction("CompareTo", CompareTo);
		L.RegFunction("New", _CreateNewtonsoft_Json_Linq_JValue);
		L.RegFunction("__tostring", ToLua.op_ToString);
		L.RegVar("HasValues", get_HasValues, null);
		L.RegVar("Type", get_Type, null);
		L.RegVar("Value", get_Value, set_Value);
		L.EndClass();
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int _CreateNewtonsoft_Json_Linq_JValue(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1 && TypeChecker.CheckTypes<string>(L, 1))
			{
				string arg0 = ToLua.ToString(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<bool>(L, 1))
			{
				bool arg0 = LuaDLL.lua_toboolean(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Guid>(L, 1))
			{
				System.Guid arg0 = StackTraits<System.Guid>.To(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.TimeSpan>(L, 1))
			{
				System.TimeSpan arg0 = StackTraits<System.TimeSpan>.To(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.Uri>(L, 1))
			{
				System.Uri arg0 = (System.Uri)ToLua.ToObject(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<double>(L, 1))
			{
				double arg0 = (double)LuaDLL.lua_tonumber(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<long>(L, 1))
			{
				long arg0 = LuaDLL.tolua_toint64(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JValue>(L, 1))
			{
				Newtonsoft.Json.Linq.JValue arg0 = (Newtonsoft.Json.Linq.JValue)ToLua.ToObject(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<System.DateTime>(L, 1))
			{
				System.DateTime arg0 = StackTraits<System.DateTime>.To(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<ulong>(L, 1))
			{
				ulong arg0 = LuaDLL.tolua_touint64(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else if (count == 1 && TypeChecker.CheckTypes<object>(L, 1))
			{
				object arg0 = ToLua.ToVarObject(L, 1);
				Newtonsoft.Json.Linq.JValue obj = new Newtonsoft.Json.Linq.JValue(arg0);
				ToLua.PushObject(L, obj);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to ctor method: Newtonsoft.Json.Linq.JValue.New");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateComment(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Newtonsoft.Json.Linq.JValue o = Newtonsoft.Json.Linq.JValue.CreateComment(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CreateString(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			string arg0 = ToLua.CheckString(L, 1);
			Newtonsoft.Json.Linq.JValue o = Newtonsoft.Json.Linq.JValue.CreateString(arg0);
			ToLua.PushObject(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int WriteTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 3);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
			Newtonsoft.Json.JsonWriter arg0 = (Newtonsoft.Json.JsonWriter)ToLua.CheckObject<Newtonsoft.Json.JsonWriter>(L, 2);
			Newtonsoft.Json.JsonConverter[] arg1 = ToLua.CheckObjectArray<Newtonsoft.Json.JsonConverter>(L, 3);
			obj.WriteTo(arg0, arg1);
			return 0;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int Equals(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 2 && TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JValue>(L, 2))
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				Newtonsoft.Json.Linq.JValue arg0 = (Newtonsoft.Json.Linq.JValue)ToLua.ToObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<object>(L, 2))
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				object arg0 = ToLua.ToVarObject(L, 2);
				bool o = obj != null ? obj.Equals(arg0) : arg0 == null;
				LuaDLL.lua_pushboolean(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JValue.Equals");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int GetHashCode(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 1);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
			int o = obj.GetHashCode();
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int ToString(IntPtr L)
	{
		try
		{
			int count = LuaDLL.lua_gettop(L);

			if (count == 1)
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				string o = obj.ToString();
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<System.IFormatProvider>(L, 2))
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				System.IFormatProvider arg0 = (System.IFormatProvider)ToLua.ToObject(L, 2);
				string o = obj.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 2 && TypeChecker.CheckTypes<string>(L, 2))
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				string o = obj.ToString(arg0);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (count == 3 && TypeChecker.CheckTypes<string, System.IFormatProvider>(L, 2))
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				string arg0 = ToLua.ToString(L, 2);
				System.IFormatProvider arg1 = (System.IFormatProvider)ToLua.ToObject(L, 3);
				string o = obj.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else if (TypeChecker.CheckTypes<Newtonsoft.Json.Linq.JValue, Newtonsoft.Json.Formatting>(L, 1) && TypeChecker.CheckParamsType<Newtonsoft.Json.JsonConverter>(L, 3, count - 2))
			{
				Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
				Newtonsoft.Json.Formatting arg0 = (Newtonsoft.Json.Formatting)ToLua.ToObject(L, 2);
				Newtonsoft.Json.JsonConverter[] arg1 = ToLua.ToParamsObject<Newtonsoft.Json.JsonConverter>(L, 3, count - 2);
				string o = obj.ToString(arg0, arg1);
				LuaDLL.lua_pushstring(L, o);
				return 1;
			}
			else
			{
				return LuaDLL.luaL_throw(L, "invalid arguments to method: Newtonsoft.Json.Linq.JValue.ToString");
			}
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int CompareTo(IntPtr L)
	{
		try
		{
			ToLua.CheckArgsCount(L, 2);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 1);
			Newtonsoft.Json.Linq.JValue arg0 = (Newtonsoft.Json.Linq.JValue)ToLua.CheckObject<Newtonsoft.Json.Linq.JValue>(L, 2);
			int o = obj.CompareTo(arg0);
			LuaDLL.lua_pushinteger(L, o);
			return 1;
		}
		catch (Exception e)
		{
			return LuaDLL.toluaL_exception(L, e);
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_HasValues(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)o;
			bool ret = obj.HasValues;
			LuaDLL.lua_pushboolean(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index HasValues on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Type(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)o;
			Newtonsoft.Json.Linq.JTokenType ret = obj.Type;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Type on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int get_Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)o;
			object ret = obj.Value;
			ToLua.Push(L, ret);
			return 1;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Value on a nil value");
		}
	}

	[MonoPInvokeCallbackAttribute(typeof(LuaCSFunction))]
	static int set_Value(IntPtr L)
	{
		object o = null;

		try
		{
			o = ToLua.ToObject(L, 1);
			Newtonsoft.Json.Linq.JValue obj = (Newtonsoft.Json.Linq.JValue)o;
			object arg0 = ToLua.ToVarObject(L, 2);
			obj.Value = arg0;
			return 0;
		}
		catch(Exception e)
		{
			return LuaDLL.toluaL_exception(L, e, o, "attempt to index Value on a nil value");
		}
	}
}

